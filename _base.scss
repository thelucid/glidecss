@charset "UTF-8";

$_theme: () !default;

@function fetch($path...) {
  $value: $_theme;

  @each $segment in $path {
    @if not map-has-key($value, $segment) { @return null; }
    $value: map-get($value, $segment);
  }

  @return $value;
}

@function theme($path...) {
  $value: fetch($path...);

  @if $value == null { @warn "Can't find #{$path}"; }

  @return if(
    type-of($value) == map and map-has-key($value, DEFAULT),
    map-get($value, DEFAULT),
    $value
  );
}

@mixin theme($map) {
  $_theme: _defaults($_theme, $map) !global;
}

@mixin screen($name) {
  @if $name == DEFAULT {
    @content;
  } @else {
    @media(min-width: fetch(screens, $name)) { @content; }
  }
}

@mixin screens($args...) {
  @include _property($args...) using ($property, $map) {
    @if ($property) {
      @each $name, $value in $map {
        @include screen($name) { #{$property}: $value; }
      }
    } @else {
      @each $name, $value in $map {
        @include screen($name) { @content($value); }
      }
    }
  }
}

@mixin mode($name) {
  @if $name == DEFAULT {
    @content;
  } @else {
    $selector: ();

    $template: fetch(modes, $name);
    @if $template == null { @error "Unknown mode: #{$name}"; }

    @each $complex in selector-parse(&) {
      $selector: append(
        $selector,
        _interpolate($template, (mode: $name, selector: $complex)),
        comma
      );
    }

    @at-root #{$selector} { @content; }
  }
}

@mixin modes($args...) {
  @include _property($args...) using ($property, $map) {
    @if ($property) {
      @each $name, $value in $map {
        @include mode($name) { #{$property}: $value; }
      }
    } @else {
      @each $name, $value in $map {
        @include mode($name) { @content($value); }
      }
    }
  }
}

@mixin variant($name, $template: '<class>') {
  $selector: _selector($name, &, $template, (
    class: ".<variants>#{$name}\\:<basename>",
    variant: $name
  ));

  @at-root #{$selector} { @content; }
}

@mixin variants($names...) {
  @content;

  @each $name in $names {
    $config: fetch(variants, $name) or fetch(variants, DEFAULT);

    @if $config == null { @error "No '#{$name}' variant found." }

    @if type-of($config) == string {
      $config: (type: selector, template: $config);
    }

    $type: map-get($config, type);

    @if $type == selector {
      @include variant($name, map-get($config, template)) { @content; }
    } @else if $type == screen {
      @each $screen, $value in fetch(screens) {
        @include variant($screen) {
          @include screen($screen) { @content; }
        }
      }
    } @else if $type == mode {
      @each $mode, $value in fetch(modes) {
        @include variant($mode) {
          @include mode($mode) { @content; }
        }
      }
    }
  }
}

@mixin modifier($name, $template: "<class>-<modifier>") {
  $selector: _selector($name, &, $template, (
    class: ".<variants><basename>",
    modifier: $name
  ));

  @at-root #{$selector} { @content; }
}

@mixin modifiers($args...) {
  @include _property($args...) using ($property, $map) {
    @if ($property) {
      @each $name, $value in $map {
        @include modifier($name) { #{$property}: $value; }
      }
    } @else {
      @each $name, $value in $map {
        @include modifier($name) { @content($value); }
      }
    }
  }
}

// TODO: Test and document.
@function tones($color, $tones: null) {
  @if ($tones == null) { $tones: theme(tones) };
  $result: ();

  @for $index from 1 through length($tones) {
    $adjustments: nth($tones, $index);
    $name: $index - 1;
    $tone: ();

    @each $mode, $adjust in $adjustments {
      $tint: map-get($adjust, tint);
      $shade: map-get($adjust, shade);
      $adjust: map-remove(map-remove($adjust, tint), shade);
      $new: if($tint, tint($color, $tint), if($shade, shade($color, $shade), $color));

      $tone: map-merge($tone, (
        $mode: if(length($adjust) == 0, $new, adjust-color($new, $adjust...))
      ));
    }

    $result: map-merge($result, ($name: $tone));
  }

  @return $result;
}

@function tint($color, $percentage) {
  @return mix(#fff, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix(#000, $color, $percentage);
}

@function _defaults($defaults, $map) {
  $result: $defaults;

  @each $key, $val in $map {
    @if not(map-has-key($result, $key)) {
      $result: map-merge($result, ($key: $val));
    } @else if type-of(map-get($result, $key)) == map and type-of($val) == map {
      $result: map-merge($result, ($key: _defaults(map-get($result, $key), $val)));
    }
  }

  @return $result;
}

@mixin _property($args...) {
  $first: nth($args, 1);
  $second: length($args) > 1 and nth($args, 2);

  $property: if(length($args) == 2 and type-of($first) == string and (
    type-of($second) == map or type-of($second) == list
  ), $first, null);

  @content($property, if($property, _lookup($second), _lookup($args...)));
}

@function _lookup($arg, $args...) {
  $value: if(
    type-of($arg) == map, $arg, if(
      type-of($arg) == list, fetch($arg...), fetch($arg, $args...)
    )
  );

  @if $value == null { @error "Can't find: #{$arg}, #{$args}"; }

  @return $value;
}

@function _selector($name, $original, $template, $tokens) {
  @return if(
    $name == DEFAULT,
    $original,
    _update($original, _interpolate($template, $tokens))
  );
}

@function _update($selector, $template) {
  $result: ();

  @each $complex in selector-parse($selector) {
    $result: append($result, _spaced($complex, $template), comma);
  }

  @return $result;
}

@function _spaced($complex, $template) {
  $spaced: ();
  $at: _rindex($complex);

  @for $index from 1 through length($complex) {
    $compound: nth($complex, $index);

    $spaced: append(
      $spaced,
      if($index == $at, _unified($compound, $template), $compound)
    );
  }

  @return $spaced;
}

@function _rindex($complex) {
  $at: length($complex);

  @while $at >= 1 and str-index(nth($complex, $at) , '.') != 1 {
    $at: $at - 1;
  }

  @return $at;
}

@function _unified($compound, $template) {
  $unified: null;

  @each $simple in simple-selectors($compound) {
    $modified: if(
      str-index($simple, '.') == 1,
      _interpolate($template, _extract($simple)),
      $simple
    );

    $unified: if($unified, selector-append($unified, $modified), $modified);
  }

  @return $unified;
}

@function _interpolate($string, $tokens) {
  @each $name, $value in $tokens {
    $token: '<#{$name}>';
    $index: str-index($string, $token);

    @if $index {
      $head: str-slice($string, 1, $index - 1);
      $tail: str-slice($string, $index + str-length($token));
      $string: $head + $value + $tail;
    }
  }

  @return $string;
}

@function _extract($simple) {
  $variants: '';
  $basename: str-slice($simple, str-index($simple, '.') + 1);
  $index: 1;
  $separator: '\\:';

  @while ($index) {
    $variants: $variants + str-slice($basename, 1, $index - 1);
    $basename: str-slice($basename, $index);
    $index: str-index($basename, $separator);
    $index: if($index, $index + str-length($separator), $index);
  }

  @return (variants: $variants, basename: $basename);
}
